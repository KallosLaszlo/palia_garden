name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  # JSON valid√°ci√≥ - mindig fut
  validate-json:
    name: JSON Syntax Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Validate JSON files
      run: |
        echo "üîç JSON f√°jlok ellen≈ërz√©se..."
        python validate_json.py
        echo "‚úÖ JSON valid√°ci√≥ befejezve!"

  # Windows build - csak tag eset√©n
  build-windows-release:
    name: Build Windows Release
    runs-on: windows-latest
    needs: validate-json
    # Csak akkor fut, ha tag-et pusholtunk (pl. v1.0.0)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        echo "üì¶ F√ºgg≈ës√©gek telep√≠t√©se..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create simple build metadata
      shell: pwsh
      env:
        TAG_NAME: ${{ github.ref_name }}
        SHA: ${{ github.sha }}
      run: |
        Write-Host "üìù Writing simple build metadata..."
        $meta = @{ tag = $env:TAG_NAME; sha = $env:SHA } | ConvertTo-Json
        $meta | Out-File -FilePath "build_metadata.json" -Encoding utf8
    
    - name: Build Windows executable
      shell: pwsh
      run: |
        echo "üî® Windows executable √©p√≠t√©se..."
        python tools/write_version_info.py --tag $env:TAG_NAME --sha $env:SHA
        pyinstaller --onefile --windowed --icon=icon.ico --version-file=version_info.py --name=PaliaGardenOptimizer main.py

        echo "üìÅ Build k√∂nyvt√°r tartalma:"
        Get-ChildItem -Path "dist" -Recurse
    
    - name: Test executable
      run: |
        echo "üß™ Executable tesztel√©se..."
        if (Test-Path "dist/PaliaGardenOptimizer.exe") {
          $fileSize = (Get-Item "dist/PaliaGardenOptimizer.exe").Length
          echo "‚úÖ Executable sikeresen l√©trehozva!"
          echo "üìä F√°jl m√©ret: $([math]::Round($fileSize / 1MB, 2)) MB"
        } else {
          echo "‚ùå Executable nem tal√°lhat√≥!"
          exit 1
        }
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Palia Garden Optimizer ${{ github.ref_name }}
        body: |
          üåü **Palia Garden Optimizer** - Windows Release ${{ github.ref_name }}
          
          ## üöÄ √öjdons√°gok ebben a verzi√≥ban
          - Automatikus build √©s release pipeline
          - JSON valid√°ci√≥ minden nyelv≈± f√°jlhoz
          - Windows executable PyInstaller-rel
          - Multi-nyelv t√°mogat√°s (Magyar, Angol, N√©met, Spanyol, Francia)
          
          ## üì• Let√∂lt√©s
          T√∂ltsd le a `PaliaGardenOptimizer.exe` f√°jlt al√°bb √©s futtasd Windows-on.
          
          ## ‚ú® Funkci√≥k
          - Kert m√©ret testreszab√°s
          - T√∂bbf√©le optimaliz√°ci√≥s m√≥d (Max Pontsz√°m, Max B√≥nusz, Max Term√©s, stb.)
          - N√∂v√©ny b√≥nusz hat√°sok vizualiz√°ci√≥ja
          - T√∂bbnyelv≈± kezel≈ëfel√ºlet
          - Tooltip s√∫g√≥k √©s le√≠r√°sok
          
          ---
          *Automatikusan √©p√≠tve a commit-b√≥l: ${{ github.sha }}*
        draft: false
        prerelease: false
    
    - name: Upload executable to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/PaliaGardenOptimizer.exe
        asset_name: PaliaGardenOptimizer.exe
        asset_content_type: application/octet-stream

name: Build and Release

on:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'lang/**.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.py'
      - 'lang/**.json'
  release:
    types: [created]

jobs:
  validate-json:
    name: Validate JSON Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Validate JSON files
      run: |
        echo "🔍 Validating JSON files..."
        
        # Check if lang directory exists
        if [ ! -d "lang" ]; then
          echo "❌ Error: lang directory not found!"
          exit 1
        fi
        
        # Find and validate all JSON files
        json_files=$(find lang -name "*.json" -type f)
        
        if [ -z "$json_files" ]; then
          echo "❌ Error: No JSON files found in lang directory!"
          exit 1
        fi
        
        echo "📁 Found JSON files:"
        echo "$json_files"
        echo
        
        # Validate each JSON file
        for file in $json_files; do
          echo "🔎 Validating $file..."
          
          # Check if file is valid JSON
          if ! python -m json.tool "$file" > /dev/null 2>&1; then
            echo "❌ Error: $file is not valid JSON!"
            exit 1
          fi
          
          # Check if file has required fields
          if ! python -c "
import json
with open('$file', 'r', encoding='utf-8-sig') as f:
    data = json.load(f)
    required_fields = ['language_name', 'title', 'crops']
    missing = [field for field in required_fields if field not in data]
    if missing:
        print('❌ Error: Missing required fields:', missing)
        exit(1)
    print('✅ $file is valid')
"; then
            exit 1
          fi
        done
        
        echo
        echo "✅ All JSON files are valid!"

  build-windows-exe:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: validate-json
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install tkinter || echo "tkinter already available"
    
    - name: Test application
      run: |
        echo "🧪 Testing application startup..."
        timeout 10 python main.py --help || echo "Application test completed"
    
    - name: Create version info
      run: |
        $version = if ($env:GITHUB_REF -like "refs/tags/*") { 
          $env:GITHUB_REF -replace "refs/tags/", ""
        } else { 
          "dev-$($env:GITHUB_SHA.Substring(0,7))"
        }
        
        echo "VERSION=$version" >> $env:GITHUB_ENV
        
        # Create version info file for PyInstaller
        @"
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(1,0,0,0),
    prodvers=(1,0,0,0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo(
      [
        StringTable(
          '040904B0',
          [
            StringStruct('CompanyName', 'Kallós László'),
            StringStruct('FileDescription', 'Palia Garden Optimizer'),
            StringStruct('FileVersion', '$version'),
            StringStruct('InternalName', 'PaliaGardenOptimizer'),
            StringStruct('LegalCopyright', '© 2025 Kallós László'),
            StringStruct('OriginalFilename', 'PaliaGardenOptimizer.exe'),
            StringStruct('ProductName', 'Palia Garden Optimizer'),
            StringStruct('ProductVersion', '$version')
          ]
        )
      ]
    ),
    VarFileInfo([VarStruct('Translation', [1033, 1200])])
  ]
)
"@ | Out-File -FilePath "version_info.txt" -Encoding UTF8
    
    - name: Build executable with PyInstaller
      run: |
        echo "🔨 Building Windows executable..."
        
        pyinstaller --version
        
        # Check if icon exists
        $iconParam = ""
        if (Test-Path "assets/icon.ico") {
          $iconParam = "--icon=assets/icon.ico"
          echo "✅ Using custom icon"
        } else {
          echo "ℹ️ No custom icon found, using default"
        }
        
        # Create the executable
        $buildCmd = "pyinstaller --onefile --windowed --name PaliaGardenOptimizer $iconParam --version-file=version_info.txt --add-data lang;lang --add-data assets;assets --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=json --hidden-import=os --hidden-import=glob --collect-submodules=tkinter main.py"
        
        try {
          Invoke-Expression $buildCmd
          echo "✅ Windowed executable built successfully"
        } catch {
          echo "❌ PyInstaller with windowed mode failed, trying console mode..."
          $buildCmd = $buildCmd -replace "--windowed", "--console"
          Invoke-Expression $buildCmd
          echo "✅ Console executable built successfully"
        }
    
    - name: Test executable
      run: |
        echo "🧪 Testing built executable..."
        if (Test-Path "dist/PaliaGardenOptimizer.exe") {
          $fileSize = (Get-Item "dist/PaliaGardenOptimizer.exe").Length
          echo "✅ Executable built successfully!"
          echo "📦 File size: $([math]::Round($fileSize/1MB, 2)) MB"
          
          # Quick test run (with timeout to prevent hanging)
          Start-Process -FilePath "dist/PaliaGardenOptimizer.exe" -PassThru | ForEach-Object {
            Start-Sleep -Seconds 3
            if (!$_.HasExited) {
              $_.Kill()
            }
          }
          echo "✅ Executable test completed"
        } else {
          echo "❌ Executable not found!"
          exit 1
        }
    
    - name: Create release artifact
      run: |
        $version = $env:VERSION
        $artifactName = "PaliaGardenOptimizer-$version-Windows.exe"
        
        if (Test-Path "dist/PaliaGardenOptimizer.exe") {
          Copy-Item "dist/PaliaGardenOptimizer.exe" $artifactName
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV
        }
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: palia-garden-optimizer-windows
        path: PaliaGardenOptimizer-*.exe
        retention-days: 30
    
    - name: Create Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: PaliaGardenOptimizer-*.exe
        body: |
          ## Palia Garden Optimizer v${{ env.VERSION }}
          
          🌟 **Automated Windows Build** 🌟
          
          ### Features
          - Multi-language support (English, German, Spanish, French, Hungarian)
          - Garden optimization algorithms
          - Visual plant effect indicators
          - Drag & drop interface
          - Tooltip system with boost information
          
          ### Installation
          1. Download `PaliaGardenOptimizer-${{ env.VERSION }}-Windows.exe`
          2. Run the executable (no installation required)
          3. The application will create necessary folders automatically
          
          ### System Requirements
          - Windows 10 or later
          - No additional software required
          
          **Created by:** Kallós László  
          **Build:** ${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: Notify Build Success
    runs-on: ubuntu-latest
    needs: [validate-json, build-windows-exe]
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "🎉 Build completed successfully!"
        echo "✅ JSON validation passed"
        echo "✅ Windows executable built"
        echo "📦 Artifact uploaded to GitHub"

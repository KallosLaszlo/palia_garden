name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  # JSON validation - always runs
  validate-json:
    name: JSON Syntax Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Validate JSON files
      run: |
        echo "🔍 Validating JSON files..."
        python validate_json.py
        echo "✅ JSON validation completed!"

  # Windows build - only on tag push
  build-windows-release:
    name: Build Windows Release
    runs-on: windows-latest
    needs: validate-json
    # Only run when a tag is pushed (e.g. v1.0.0)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create simple build metadata
      shell: pwsh
      env:
        TAG_NAME: ${{ github.ref_name }}
        SHA: ${{ github.sha }}
      run: |
        Write-Host "📝 Writing simple build metadata..."
        $meta = @{ tag = $env:TAG_NAME; sha = $env:SHA } | ConvertTo-Json
        $meta | Out-File -FilePath "build_metadata.json" -Encoding utf8
    
    - name: Build Windows executable
      shell: pwsh
      env:
        TAG_NAME: ${{ github.ref_name }}
        SHA: ${{ github.sha }}
      run: |
        echo "🔨 Building Windows executable..."
        echo "DEBUG: GITHUB_WORKSPACE = $env:GITHUB_WORKSPACE"
        echo "DEBUG: TAG_NAME = $env:TAG_NAME"
        echo "DEBUG: SHA = $env:SHA"
        $out = Join-Path $env:GITHUB_WORKSPACE 'version_info.py'
        echo "DEBUG: version_info.py path = $out"
        
        echo "🛠️ Generating version_info.py..."
        python tools/write_version_info.py --tag $env:TAG_NAME --sha $env:SHA --out "$out"
        
        echo "🔍 Checking if version_info.py exists..."
        if (Test-Path "$out") {
          echo "✅ version_info.py created successfully"
          Get-Content "$out" | Select-Object -First 5
        } else {
          echo "❌ version_info.py NOT found!"
          exit 1
        }
        
        echo "🚀 Running PyInstaller..."
        pyinstaller --onefile --windowed --icon=icon.ico --version-file="$out" --name=PaliaGardenOptimizer --add-data "lang;lang" --add-data "assets;assets" --hidden-import=palia_garden_optimizer --hidden-import=garden --hidden-import=crops --hidden-import=config --hidden-import=language --hidden-import=ui_utils main.py

        echo "📁 Build directory contents:"
        Get-ChildItem -Path "dist" -Recurse
    
    - name: Test executable
      shell: pwsh
      run: |
        echo "🧪 Testing executable..."
        if (Test-Path "dist/PaliaGardenOptimizer.exe") {
          $fileSize = (Get-Item "dist/PaliaGardenOptimizer.exe").Length
          echo "✅ Executable created successfully!"
          echo "📊 File size: $([math]::Round($fileSize / 1MB, 2)) MB"
        } else {
          echo "❌ Executable not found!"
          exit 1
        }
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Palia Garden Optimizer ${{ github.ref_name }}
        body: |
          🌟 **Palia Garden Optimizer** - Windows Release ${{ github.ref_name }}
          
          ## 🚀 What's New in This Version
          - Automated build and release pipeline
          - JSON validation for all language files
          - Windows executable built with PyInstaller
          - Multi-language support (Hungarian, English, German, Spanish, French)
          
          ## 📥 Download
          Download the `PaliaGardenOptimizer.exe` file below and run it on Windows.
          
          ## ✨ Features
          - 🌱 Customizable garden size configuration
          - 🎯 Multiple optimization modes (Max Score, Max Bonus, Max Yield, etc.)
          - 📊 Plant bonus effect visualization
          - 🌐 Multi-language user interface
          - 💡 Tooltips and detailed descriptions
          
          ## 🛠️ System Requirements
          - Windows 10/11
          - No Python installation required
          
          ---
          *Automatically built from commit: ${{ github.sha }}*
        draft: false
        prerelease: false
    
    - name: Upload executable to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/PaliaGardenOptimizer.exe
        asset_name: PaliaGardenOptimizer.exe
        asset_content_type: application/octet-stream
